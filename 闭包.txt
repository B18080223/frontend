// 下面的代码将输出什么？请解释为什么。

//示例一
function someFunction() {
  let a = 100
  return function () {
    return a++；
  }
}


let f1 = someFunction()；
let f2 = someFunction()；


console.log(f1())；//100
console.log(f2())；//100



//示例二
function someFunction() {
  let a = 100;
  function s(){
	a=a+1;
    return a;
  }
  return s;
}

let f = someFunction();
console.log(f());//101
console.log(f());//102






//示例三

function f(){
	var name="zhangsan";
	function s(){
		console.log("abb",name);
	}
	return s;
}

var ff=f();
ff();  //abb zhangsan


//示例四
function say667() {
    // Local variable that ends up within closure
    let num = 666;
    let sayAlert = function() {
        console.log("内层变量",num); 
        
    }
    num++;
    console.log("外层变量",num); //667 只在new 构造函数的时候执行 
        console.log("内层变量",num);
    }
    num++;
    console.log("外层变量",num); //667  只在new 构造函数的时候执行
    return sayAlert;
}

let sayAlert = new say667();
sayAlert()//执行结果应该弹出的667
sayAlert()//执行结果应该弹出的667


//示例五
function say667() {
    // Local variable that ends up within closure
    let num = 666;
    let sayAlert = function() {
        console.log("内层变量",num); 
        num++;
    }
   
    console.log("外层变量",num); //666 只在new 构造函数的时候执行 
    return sayAlert;
}

let sayAlert = new say667();
sayAlert()//执行结果应该弹出的666
sayAlert()//执行结果应该弹出的667
