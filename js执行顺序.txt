async function async1(){
	console.log("async1 start");
	await async2();
	console.log("async1 end");
}
async function async2(){
	console.log("async2");
}
console.log("scirpt start");
setTimeout(()=>{console.log("setTimeout")});
async1();
new Promise((resolve)=>{
	console.log("promise start");
	resolve()
}).then(()=>{
         console.log("promise end")
             })
console.log("script end");











async function f1() {
    console.log(1)
}
async function f2() {
    console.log(2)
    await console.log(3)
    // 取消注释后输出顺序又是怎样
    // console.log(5)
}
function f3() {
    console.log(4)
}
f1()
f2()
f3()



















// 定义函数，先跳过
async function async1() {
  console.log("async1 start"); // 2
  await async2(); // 先执行 async2() , 进入 async2 函数内

  // await 后的代码都是微任务，将其放入微任务队列 --- 微任务 1
  console.log("async1 end"); // 6
}

// 定义函数，先跳过
async function async2() {
  console.log("async2"); // 3
}

// 同步任务
console.log("script start"); // 1

// 宏任务 1
setTimeout(function () {
  console.log("setTimeout"); // 8
}, 0);

// 同步任务
async1(); // 进入 async1 函数内

// 同步任务 -- Promise 函数体内的代码会立刻执行
new Promise(function (resolve) {
  console.log("promise1"); // 4
  resolve(); // Promise 状态变为 resolved , 立即触发了 then 函数
}).then(function () {
  // then 函数是个微任务，将其放入微任务队列 --- 微任务 2
  console.log("promise2"); // 7
});

// 同步任务
console.log("script end"); // 5

// 同步任务执行完毕，开始执行微任务
// 依次执行微任务1 和 微任务 2
// 最后执行宏任务

















//1475236
console.log(1);
setTimeout(() =>{
  console.log(2);
  Promise.resolve().then(() => {
    console.log(3)
  })
})

new Promise((resolve, reject) => {
  console.log(4);
  resolve(5);
}).then((data) => {
 console.log(data);
})

setTimeout(() =>{
  console.log(6);
})
console.log(7);
